############# Model management
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import pymongo
import decimal
from bson.decimal128 import Decimal128, create_decimal128_context
import pickle
import time
from pymongo.collection import ReturnDocument

class ModelManager:

	dbConString = None
	_dbCon = None
	db = None

	def __init__(self, conString):
		global dbConString
		dbConString = conString

	@classmethod
	def getDBConnection(cls):
		#global ModelManager._dbCon
		if cls._dbCon is None:
			try:
				cls._dbCon = pymongo.MongoClient(dbConString) #'mongodb://localhost:27017/'
			except DatabaseException as dbExcept:
				raise Exception(dbExcept)
		else:
			return cls._dbCon

	@classmethod
	def getNextSeqNum(cls):
		#db = cls.db
		#print('getNextSeqNum::cls.db',cls.db)
		print('getNextSeqNum::db',db)
		#db = cls.db
		D128_CTX = create_decimal128_context()
		with decimal.localcontext(D128_CTX):
			d1 = Decimal128('0.1')        
		seqDoc = db.seq.find_one_and_update(filter={'_id': "version"}, update={'$inc': {"seq":d1}}, return_document=ReturnDocument.AFTER)
		print('seqDoc::',seqDoc)
		print("seqDoc::seqDoc['seq']",seqDoc['seq'])
		#print('seqDoc::seqDoc.seq',seqDoc.seq)
		return Decimal128(str(seqDoc['seq']))

	def saveModelToDB(self, model, model_name, dbName, collection):
		dbCon = ModelManager.getDBConnection()
		print(dbCon)
		global db
		db = dbCon[dbName]
		print('saveModelToDB::',db)
		col = db[collection]

		#pickling the model
		pickled_model = pickle.dumps(model)

		info = col.insert_one({'model': pickled_model, 'name': model_name, 'version': ModelManager.getNextSeqNum() , 'created_time':time.ctime()})
		print(info.inserted_id, ' saved with this id successfully!')

		details = {
			'inserted_id':info.inserted_id,
			'model_name':model_name,
			'created_time':time.time()
		}
		return details

	def loadModelFromDB(self,model_name, dbName, collection):
		json_data = {}
		dbCon = ModelManager.getDBConnection()
		global db
		db = dbCon[dbName]
		col = db[collection]

		data = col.find({'name': model_name})

		for i in data:
			json_data = i
		#fetching model from db
		print('json_data::',json_data)
		pickled_model = json_data['model']

		return pickle.loads(pickled_model)